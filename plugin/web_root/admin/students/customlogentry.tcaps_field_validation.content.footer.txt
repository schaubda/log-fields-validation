<!-- Begin TCAPS Log Fields Validation Plugin -->
<script type="text/javascript">
    /**
     * Mapping of logical field keys to their corresponding form field names.
     * @constant
     * @type {Object.<string, string>}
     */
    const FIELD_NAMES =
              {
                  'entryDate':        'UF-008005',
                  'reporterName':     'UF-008004',
                  'employeeID':       'UF-008025',
                  'logType':          'UF-008012',
                  'subType':          'subtype',
                  'studentName':      'UF-008008',
                  'logDescription':   'UF-008009',
                  'incidentLocation': 'UF-008021',
                  'entryTime':        'UF-008006'
              };

    /**
     * Selector prefix for input fields by name attribute.
     * Selects form fields starting with the given text.
     * @constant
     * @type {string}
     */
    const NAME_SELECTOR = 'name^=';

    /**
     * Validation error messages for specific fields.
     * Maps logical field keys to their corresponding error message strings.
     * @constant
     * @type {Object.<string, string>}
     */
    const VALIDATION_MESSAGES =
              {
                  'reporterName': 'This must be the reporter\'s name in the format "Last, First"',
                  'incidentTime': 'Incident time must be between 5:00 AM and 11:59 PM'
              };

    /**
     * Immediately Invoked Function Expression (IIFE)
     * to initialize the TCAPS Log Fields Validation Plugin.
     *
     * - Removes the student name row from the form.
     * - Configures stock form fields for validation.
     * - Sets up a MutationObserver to handle changes in the form from
     *   the Log Entry Management plugin.
     */
    (function ()
    {
        $j(`[${NAME_SELECTOR}"${FIELD_NAMES.studentName}"]`).closest('tr').remove();
        configureStockFormFields();
        setupMutationObserver();
    })();

    /**
     * Configures stock form fields for validation and special behaviors.
     *
     * - Builds a selector for all input fields defined in FIELD_NAMES.
     * - Adds the 'required' class to fields except those in the ignoredFields list.
     * - Assigns special validation functions to specific fields by adding the
     *   'psSpecialValidate' class and setting the 'data-specialfunction' attribute.
     * - Adds the 'timeEntry' class to the entry time field.
     * - Calls logTypeChange to set initial state based on the selected log type.
     * - Sets up a change event handler for the log type dropdown.
     */
    function configureStockFormFields()
    {
        let selector = '';

        // Build a selector string for all input fields defined in FIELD_NAMES.
        // Each selector targets fields by their name attribute prefix.
        for (let key in FIELD_NAMES)
        {
            selector += `[${NAME_SELECTOR}"${FIELD_NAMES[key]}"], `;
        }

        // Remove the last comma and space
        selector = selector.slice(0, -2);

        let inputFields = $j(selector);

        // Mapping of field keys to their corresponding validation function names.
        // Used to assign special validation logic to specific fields.
        let fieldFuncs =
                {
                    'reporterName': 'validateReporterNameField',
                    'incidentTime': 'validateIncidentTime'
                };

        inputFields.each(function (index, element)
                         {
                             // Get the logical field key by extracting the first 9 characters of the field's name attribute
                             let fieldKey =
                                     getFieldKeyByName($j(element).attr('name').substring(0, 9));

                             // List of fields to ignore when adding the 'required' class
                             let ignoredFields = ['subType', 'employeeID', 'incidentLocation',
                                                  'entryTime'];

                             // Add 'required' class to fields not in the ignoredFields list
                             if (!ignoredFields.includes(fieldKey))
                             {
                                 $j(element).addClass('required');
                             }

                             // If the field has a special validation function,
                             // add the 'psSpecialValidate' class
                             // and set the data-specialfunction attribute to the function name
                             if (fieldKey in fieldFuncs)
                             {
                                 $j(element).addClass('psSpecialValidate');
                                 $j(element).attr('data-specialfunction', fieldFuncs[fieldKey]);
                             }
                         });

        // Add 'timeEntry' class to the entry time field for time-specific behaviors
        $j(`[${NAME_SELECTOR}"${FIELD_NAMES.entryTime}"]`).addClass('timeEntry');

        // Run log type change handler to set initial state based on the selected log type
        logTypeChange();

        // Set up a change event handler for the log type dropdown
        $j('#logtype').on('change', logTypeChange);
    }

    /**
     * Validates the reporter name field to ensure it is in "Last, First" format.
     * @param {jQuery} input - The jQuery input element.
     * @returns {string|undefined} Error message if invalid, otherwise undefined.
     */
    function validateReporterNameField(input)
    {
        // Regular expression to match a string in the format "Last, First"
        let matchPattern = /.+, .+/;

        // Test if the input value matches the required format
        if (!matchPattern.test(input.val().trim()))
        {
            return VALIDATION_MESSAGES.reporterName;
        }
    }

    /**
     * Validates the incident time field to ensure it is between 5:00 AM and 11:59 PM.
     * @param {jQuery} input - The jQuery input element.
     * @returns {string|undefined} Error message if invalid, otherwise undefined.
     */
    function validateIncidentTime(input)
    {
        // Convert the input time from 12-hour to 24-hour format and split into hours and minutes
        let [incidentHours, incidentMinutes] = convertTime12to24(input.val()).split(':');

        // Create a Date object for the incident time and set its hours and minutes
        let incidentTime = new Date();
        incidentTime.setHours(parseInt(incidentHours), parseInt(incidentMinutes), 0, 0);

        // Create a Date object representing the minimum allowed time (5:00 AM)
        let minTime = new Date();
        minTime.setHours(5, 0, 0, 0);

        // Create a Date object representing the maximum allowed time (11:59 PM)
        let maxTime = new Date();
        maxTime.setHours(23, 59, 59, 0);

        // Check if the incident time is outside the allowed range
        if (incidentTime < minTime || incidentTime > maxTime)
        {
            return VALIDATION_MESSAGES.incidentTime;
        }
    }

    /**
     * Handles changes to the log type field.
     * Adds or removes required classes on incident fields based on log type.
     * Calls initBehaviors to refresh the page UI.
     */
    function logTypeChange()
    {
        // Get the selected log type value from the dropdown and convert it to an integer
        let logType = parseInt($j('#logtype').val());

        // Select the incident location and incident time fields using their name attributes
        let incidentFields =
                $j(`[${NAME_SELECTOR}"${FIELD_NAMES.incidentLocation}"], [${NAME_SELECTOR}"${FIELD_NAMES.incidentTime}"]`);

        // If the log type is Discipline (-100000), make the incident fields required
        if (logType === -100000)
        {
            incidentFields.addClass('required');
        }
        else
        {
            // Otherwise, remove validation-related classes and clear any validation messages
            incidentFields
                .each(function (index, element)
                      {
                          $j(element).removeClass('required unvalidated tagged hasHadError error');

                          if ($j(element).nextAll('.error-message').length > 0)
                          {
                              clearError($j(element));
                          }
                      });
        }

        // Refresh the page UI to apply all validation class changes
        initBehaviors();
    }

    /**
     * Returns the logical field key for a given form field name.
     * @param {string} name - The form field name to look up.
     * @returns {string|null} The logical field key, or null if not found.
     */
    function getFieldKeyByName(name)
    {
        for (let key in FIELD_NAMES)
        {
            // If the value for this key matches the provided name, return the key
            if (FIELD_NAMES[key] === name)
            {
                return key;
            }
        }

        // If no matching key is found, return null
        return null;
    }

    /**
     * Converts a 12-hour time string (e.g., "01:30 PM") to 24-hour format (e.g., "13:30").
     * Used for validating incident times.
     * @param {string} time12h - The time string in 12-hour format.
     * @returns {string} The time in 24-hour format.
     */
    function convertTime12to24(time12h)
    {
        // Split the 12-hour time string into time and AM/PM modifier
        let [time, modifier] = time12h.split(' ');

        // Split the time into hours and minutes
        let [hours, minutes] = time.split(':');

        // If the hour is 12, set it to 00 (midnight or noon will be handled by modifier)
        if (hours === '12')
        {
            hours = '00';
        }

        // If the modifier is PM, add 12 to the hours to convert to 24-hour format
        if (modifier === 'PM')
        {
            hours = parseInt(hours, 10) + 12;
        }

        // Return the time in 24-hour format as a string
        return `${hours}:${minutes}`;
    }

    /**
     * Sets up a MutationObserver to watch for changes in the form table.
     * Observes the first table inside '#content-main .box-round' for added or removed child nodes.
     */
    function setupMutationObserver()
    {
        // Select the target node to observe for changes
        const targetNode = $j('#content-main .box-round table:first').get(0);
        const config = {childList: true, subtree: true};

        // Create a new MutationObserver instance with the mutation handler
        const observer = new MutationObserver(mutationHandler);
        observer.observe(targetNode, config);
    }

    /**
     * Handles mutations observed in the form table.
     * Iterates through mutation records and checks for added nodes.
     * If the incident date field (`#discipline_incidentdate`) is added,
     * disconnects the observer and triggers custom form field configuration.
     *
     * @param {MutationRecord[]} mutationsList - List of mutation records.
     * @param {MutationObserver} observer - The MutationObserver instance.
     */
    function mutationHandler(mutationsList, observer)
    {
        // Iterate through each mutation record
        mutationsList.forEach(function (mutation)
                              {
                                  // Check if the mutation type is 'childList'
                                  if (mutation.type === 'childList')
                                  {
                                      // If the incident date field is added, remove the observer
                                      if ($j(mutation.addedNodes).is('#discipline_incidentdate'))
                                      {
                                          observer.disconnect();
                                          configureCustomFormFields();
                                      }
                                  }
                              });
    }

    /**
     * Configures form fields for validation and special behaviors.
     *
     * - Builds a selector for all input fields defined in FIELD_NAMES.
     * - Adds the 'required' class to fields except those in the ignoredFields list.
     * - Assigns special validation functions to specific fields by adding the
     *   'psSpecialValidate' class and setting the 'data-specialfunction' attribute.
     */
    function configureCustomFormFields()
    {
        restripeTable();

        let incidentDate = $j('#discipline_incidentdate');
        let incidentTime = $j('#discipline_incidenttime_disp');

        incidentDate.attr('data-validation', '{"type": "date", "required": "true"}');

        incidentTime.addClass('required psSpecialValidate');
        incidentTime.attr('data-specialfunction', 'validateIncidentTime');

        initBehaviors();
    }

    /**
     * Applies alternating background colors to table rows for visual striping.
     * Targets the first table inside '#content-main .box-round', excluding the last row.
     * Even-indexed rows get a light blue background, odd-indexed rows get white.
     */
    function restripeTable()
    {
        $j('#content-main .box-round table:first')
            .find('tr').slice(0, -1)
            .each(function (index)
                  {
                      if (index % 2 === 0)
                      {
                          $j(this).attr('bgcolor', '#edf3fe');
                      }
                      else
                      {
                          $j(this).attr('bgcolor', '#fff');
                      }
                  });
    }
</script>
<!-- End TCAPS Log Fields Validation Plugin -->