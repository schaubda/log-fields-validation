<!-- Begin TCAPS Log Fields Validation Plugin -->
<script type="text/javascript">
    const FIELD_NAMES =
              {
                  'incidentDate':     'UF-008019',
                  'entryDate':        'UF-008005',
                  'reporterName':     'UF-008004',
                  'employeeID':       'UF-008025',
                  'logType':          'UF-008012',
                  'subType':          'subtype',
                  'studentName':      'UF-008008',
                  'logDescription':   'UF-008009',
                  'incidentLocation': 'UF-008021',
                  'incidentTime':     'UF-008006'
              };
    const NAME_SELECTOR = 'name^=';

    function getFieldKeyByName(name)
    {
        for (let key in FIELD_NAMES)
        {
            if (FIELD_NAMES[key] === name)
            {
                return key;
            }
        }

        return null;
    }

    function convertTime12to24(time12h)
    {
        let [time, modifier] = time12h.split(' ');

        let [hours, minutes] = time.split(':');

        if (hours === '12')
        {
            hours = '00';
        }

        if (modifier === 'PM')
        {
            hours = parseInt(hours, 10) + 12;
        }

        return `${hours}:${minutes}`;
    }

    (function ()
    {
        let selector = '';

        for (let key in FIELD_NAMES)
        {
            selector += `[${NAME_SELECTOR}"${FIELD_NAMES[key]}"], `;
        }

        selector = selector.slice(0, -2);

        let inputFields = $j(selector);
        let fieldFuncs =
                {
                    'reporterName': 'validateReporterNameField',
                    'employeeID':   'validateReporterIDField',
                    'incidentTime': 'validateIncidentTime'
                };

        inputFields.each(function (index, element)
                         {
                             let fieldKey =
                                     getFieldKeyByName($j(element).attr('name').substring(0, 9));
                             let ignoredFields = ['subType', 'incidentLocation', 'incidentTime'];

                             if (!ignoredFields.includes(fieldKey))
                             {
                                 $j(element).addClass('required');
                             }

                             if (fieldKey in fieldFuncs)
                             {
                                 $j(element).addClass('psSpecialValidate');
                                 $j(element).attr('data-specialfunction', fieldFuncs[fieldKey]);
                             }
                         });
    })();

    $j(function ()
       {
           let dateFields = $j(
               `[${NAME_SELECTOR}"${FIELD_NAMES.incidentDate}"], [${NAME_SELECTOR}"${FIELD_NAMES.entryDate}"]`);
           let timeField = $j(`[${NAME_SELECTOR}"${FIELD_NAMES.incidentTime}"]`);

           dateFields.addClass('psDateWidget');
           timeField.addClass('timeEntry');

           logTypeChange();
           $j('#logtype').on('change', logTypeChange);
       });

    function validateReporterNameField(input)
    {
        let matchPattern = /.+, .+/;

        if (!matchPattern.test(input.val().trim()))
        {
            return 'This must be the reporter\'s name in the format "Last, First"';
        }
    }

    function validateReporterIDField(input)
    {
        let matchPattern = /^\d{5,7}$/;

        if (!matchPattern.test(input.val().trim()))
        {
            return 'This must be a valid employee number';
        }
    }

    function validateIncidentTime(input)
    {
        let [incidentHours, incidentMinutes] = convertTime12to24(input.val()).split(':');
        let incidentTime = new Date();
        incidentTime.setHours(parseInt(incidentHours), parseInt(incidentMinutes), 0, 0);

        let minTime = new Date();
        minTime.setHours(6, 0, 0, 0);

        let maxTime = new Date();
        maxTime.setHours(18, 0, 0, 0);

        if (incidentTime < minTime || incidentTime > maxTime)
        {
            return 'Incident time must be between 6:00 AM and 6:00 PM';
        }
    }

    function logTypeChange()
    {
        let logType = parseInt($j('#logtype').val());
        let incidentFields =
                $j(`[${NAME_SELECTOR}"${FIELD_NAMES.incidentLocation}"], [${NAME_SELECTOR}"${FIELD_NAMES.incidentTime}"]`);

        if (logType === -100000)
        {
            incidentFields.addClass('required');
        }
        else
        {
            incidentFields
                .each(function (index, element)
                      {
                          $j(element).removeClass('required unvalidated tagged hasHadError error');

                          if ($j(element).nextAll('.error-message').length > 0)
                          {
                              clearError($j(element));
                          }
                      });
        }

        initBehaviors();
    }
</script>
<!-- End TCAPS Log Fields Validation Plugin -->